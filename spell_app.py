#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ - —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞
"""

import sys
import requests
import json
import time
import os
from datetime import datetime


class SpellCheckerApp:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
        })
        self.history = []
    
    def clear_screen(self):
        """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
        os.system('clear')
    
    def print_header(self):
        """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("=" * 60)
        print("üî§ –ü–†–û–í–ï–†–ö–ê –û–†–§–û–ì–†–ê–§–ò–ò - –¢–ï–†–ú–ò–ù–ê–õ–¨–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï")
        print("=" * 60)
        print("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É:")
        print("‚Ä¢ 'help' –∏–ª–∏ 'h' - –ø–æ–º–æ—â—å")
        print("‚Ä¢ 'history' - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
        print("‚Ä¢ 'clear' - –æ—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω")
        print("‚Ä¢ 'quit' –∏–ª–∏ 'q' - –≤—ã—Ö–æ–¥")
        print("-" * 60)
    
    def check_yandex_speller(self, text):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.–°–ø–µ–ª–ª–µ—Ä"""
        try:
            url = "https://speller.yandex.net/services/spellservice.json/checkText"
            params = {'text': text, 'lang': 'ru', 'options': 0}
            
            response = self.session.get(url, params=params, timeout=10)
            response.raise_for_status()
            
            result = response.json()
            corrected_text = text
            errors_found = len(result)
            
            offset = 0
            for error in result:
                if 's' in error and error['s']:
                    pos = error['pos'] + offset
                    length = error['len']
                    suggestion = error['s'][0]
                    
                    corrected_text = (corrected_text[:pos] + 
                                    suggestion + 
                                    corrected_text[pos + length:])
                    
                    offset += len(suggestion) - length
            
            return corrected_text, errors_found > 0, "–Ø–Ω–¥–µ–∫—Å.–°–ø–µ–ª–ª–µ—Ä"
            
        except Exception as e:
            return text, False, f"–û—à–∏–±–∫–∞: {e}"
    
    def process_text(self, text):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        if not text.strip():
            return
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é: {text}")
        print("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...")
        
        corrected, has_errors, source = self.check_yandex_speller(text)
        
        if has_errors:
            print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ({source}): {corrected}")
        else:
            print(f"‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {text}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.history.append({
            'time': datetime.now().strftime("%H:%M:%S"),
            'original': text,
            'corrected': corrected,
            'has_errors': has_errors
        })
    
    def show_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–º–æ—â—å"""
        print("\nüìñ –°–ü–†–ê–í–ö–ê:")
        print("‚Ä¢ –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏")
        print("‚Ä¢ 'history' - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø—Ä–æ–≤–µ—Ä–æ–∫")
        print("‚Ä¢ 'clear' - –æ—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω")
        print("‚Ä¢ 'quit' –∏–ª–∏ 'q' - –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        print("‚Ä¢ 'help' –∏–ª–∏ 'h' - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
        print()
    
    def show_history(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        if not self.history:
            print("üìù –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
            return
        
        print("\nüìù –ò–°–¢–û–†–ò–Ø –ü–†–û–í–ï–†–û–ö (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):")
        print("-" * 60)
        
        for i, item in enumerate(self.history[-10:], 1):
            status = "‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ" if item['has_errors'] else "‚úÖ –ë–µ–∑ –æ—à–∏–±–æ–∫"
            print(f"{i:2d}. [{item['time']}] {status}")
            print(f"    –ò—Å—Ö–æ–¥–Ω—ã–π: {item['original']}")
            if item['has_errors']:
                print(f"    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π: {item['corrected']}")
            print()
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.clear_screen()
        self.print_header()
        
        try:
            while True:
                try:
                    user_input = input("\nüí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç: ").strip()
                    
                    if not user_input:
                        continue
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                    if user_input.lower() in ['quit', 'q', 'exit']:
                        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                        break
                    
                    elif user_input.lower() in ['help', 'h']:
                        self.show_help()
                    
                    elif user_input.lower() == 'history':
                        self.show_history()
                    
                    elif user_input.lower() == 'clear':
                        self.clear_screen()
                        self.print_header()
                    
                    else:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é
                        self.process_text(user_input)
                
                except KeyboardInterrupt:
                    print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                    
                except EOFError:
                    print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
        
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            sys.exit(1)


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏...")
    time.sleep(1)
    
    app = SpellCheckerApp()
    app.run()


if __name__ == "__main__":
    main()
