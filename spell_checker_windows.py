#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Standalone –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏
–ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Windows –∏ macOS
"""

import sys
import requests
import json
import time
import os
import platform
from datetime import datetime


class SpellCheckerApp:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        self.history = []
        self.platform = platform.system()
    
    def clear_screen(self):
        """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ"""
        if self.platform == 'Windows':
            os.system('cls')
        else:
            os.system('clear')
    
    def print_header(self):
        """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("=" * 70)
        print("üî§ –ü–†–û–í–ï–†–ö–ê –û–†–§–û–ì–†–ê–§–ò–ò - –¢–ï–†–ú–ò–ù–ê–õ–¨–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï")
        print(f"üñ•Ô∏è  –°–∏—Å—Ç–µ–º–∞: {self.platform}")
        print("=" * 70)
        print("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É:")
        print("‚Ä¢ 'help' –∏–ª–∏ 'h' - –ø–æ–º–æ—â—å")
        print("‚Ä¢ 'history' - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
        print("‚Ä¢ 'clear' - –æ—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω")
        print("‚Ä¢ 'quit' –∏–ª–∏ 'q' - –≤—ã—Ö–æ–¥")
        print("-" * 70)
    
    def check_yandex_speller(self, text):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.–°–ø–µ–ª–ª–µ—Ä"""
        try:
            url = "https://speller.yandex.net/services/spellservice.json/checkText"
            params = {'text': text, 'lang': 'ru', 'options': 0}
            
            response = self.session.get(url, params=params, timeout=10)
            response.raise_for_status()
            
            result = response.json()
            corrected_text = text
            errors_found = len(result)
            
            offset = 0
            for error in result:
                if 's' in error and error['s']:
                    pos = error['pos'] + offset
                    length = error['len']
                    suggestion = error['s'][0]
                    
                    corrected_text = (corrected_text[:pos] + 
                                    suggestion + 
                                    corrected_text[pos + length:])
                    
                    offset += len(suggestion) - length
            
            return corrected_text, errors_found > 0, "–Ø–Ω–¥–µ–∫—Å.–°–ø–µ–ª–ª–µ—Ä"
            
        except Exception as e:
            return text, False, f"–û—à–∏–±–∫–∞: {str(e)[:50]}..."
    
    def check_languagetool(self, text):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ LanguageTool (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)"""
        try:
            url = "https://api.languagetool.org/v2/check"
            data = {'text': text, 'language': 'ru-RU'}
            
            response = self.session.post(url, data=data, timeout=15)
            response.raise_for_status()
            
            result = response.json()
            corrected_text = text
            errors_found = len(result.get('matches', []))
            
            for match in reversed(result.get('matches', [])):
                if match.get('replacements'):
                    offset = match['offset']
                    length = match['length']
                    replacement = match['replacements'][0]['value']
                    
                    corrected_text = (corrected_text[:offset] + 
                                    replacement + 
                                    corrected_text[offset + length:])
            
            return corrected_text, errors_found > 0, "LanguageTool"
            
        except Exception as e:
            return text, False, f"–û—à–∏–±–∫–∞: {str(e)[:50]}..."
    
    def process_text(self, text):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        if not text.strip():
            return
        
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è—é: {text}")
        print("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ø–Ω–¥–µ–∫—Å.–°–ø–µ–ª–ª–µ—Ä
        corrected, has_errors, source = self.check_yandex_speller(text)
        
        # –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º LanguageTool
        if not has_errors and "–û—à–∏–±–∫–∞" in source:
            print("‚ö†Ô∏è  –Ø–Ω–¥–µ–∫—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É—é LanguageTool...")
            corrected, has_errors, source = self.check_languagetool(text)
        
        if has_errors:
            print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ({source}):")
            print(f"   üìù {corrected}")
        else:
            if "–û—à–∏–±–∫–∞" in source:
                print(f"‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {text}")
            else:
                print(f"‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ({source})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.history.append({
            'time': datetime.now().strftime("%H:%M:%S"),
            'original': text,
            'corrected': corrected,
            'has_errors': has_errors,
            'source': source
        })
    
    def show_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–º–æ—â—å"""
        print("\nüìñ –°–ü–†–ê–í–ö–ê:")
        print("‚Ä¢ –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏")
        print("‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ø–Ω–¥–µ–∫—Å.–°–ø–µ–ª–ª–µ—Ä –∏ LanguageTool")
        print("‚Ä¢ 'history' - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø—Ä–æ–≤–µ—Ä–æ–∫")
        print("‚Ä¢ 'clear' - –æ—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω")
        print("‚Ä¢ 'quit' –∏–ª–∏ 'q' - –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        print("‚Ä¢ 'help' –∏–ª–∏ 'h' - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
        print(f"‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞: {self.platform}")
        print()
    
    def show_history(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        if not self.history:
            print("\nüìù –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
            return
        
        print(f"\nüìù –ò–°–¢–û–†–ò–Ø –ü–†–û–í–ï–†–û–ö (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):")
        print("-" * 70)
        
        for i, item in enumerate(self.history[-10:], 1):
            status = "‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ" if item['has_errors'] else "‚úÖ –ë–µ–∑ –æ—à–∏–±–æ–∫"
            print(f"{i:2d}. [{item['time']}] {status} ({item.get('source', 'Unknown')})")
            print(f"    üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π: {item['original']}")
            if item['has_errors']:
                print(f"    üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π: {item['corrected']}")
            print()
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.clear_screen()
        self.print_header()
        
        try:
            while True:
                try:
                    user_input = input("\nüí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç: ").strip()
                    
                    if not user_input:
                        continue
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                    if user_input.lower() in ['quit', 'q', 'exit']:
                        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                        break
                    
                    elif user_input.lower() in ['help', 'h']:
                        self.show_help()
                    
                    elif user_input.lower() == 'history':
                        self.show_history()
                    
                    elif user_input.lower() == 'clear':
                        self.clear_screen()
                        self.print_header()
                    
                    else:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é
                        self.process_text(user_input)
                
                except KeyboardInterrupt:
                    print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                    
                except EOFError:
                    print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
        
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
            sys.exit(1)


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏...")
        print(f"üñ•Ô∏è  –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {platform.system()} {platform.release()}")
        print("üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É...")
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
        test_session = requests.Session()
        test_session.get("https://www.google.com", timeout=5)
        print("‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø–æ—Ä—è–¥–∫–µ")
        
        time.sleep(1)
        
        app = SpellCheckerApp()
        app.run()
        
    except requests.exceptions.RequestException:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        sys.exit(1)


if __name__ == "__main__":
    main()
