#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ macOS
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç tkinter –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import requests
import threading
import json
from datetime import datetime


class SpellCheckerGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("üî§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏")
        self.root.geometry("700x500")
        self.root.configure(bg='#f0f0f0')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
        })
        
        self.setup_ui()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window()
    
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenwidth() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(self.root, bg='#2c3e50', height=60)
        title_frame.pack(fill='x', padx=10, pady=(10, 5))
        title_frame.pack_propagate(False)
        
        title_label = tk.Label(
            title_frame, 
            text="üî§ –ü–†–û–í–ï–†–ö–ê –û–†–§–û–ì–†–ê–§–ò–ò", 
            font=('SF Pro Display', 18, 'bold'),
            fg='white', 
            bg='#2c3e50'
        )
        title_label.pack(expand=True)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = tk.Frame(self.root, bg='#f0f0f0')
        main_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        input_label = tk.Label(
            main_frame, 
            text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:", 
            font=('SF Pro Display', 12),
            bg='#f0f0f0'
        )
        input_label.pack(anchor='w', pady=(5, 2))
        
        self.input_text = scrolledtext.ScrolledText(
            main_frame,
            height=6,
            font=('SF Pro Display', 11),
            wrap=tk.WORD,
            bg='white',
            relief='solid',
            borderwidth=1
        )
        self.input_text.pack(fill='x', pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = tk.Frame(main_frame, bg='#f0f0f0')
        button_frame.pack(fill='x', pady=(0, 10))
        
        self.check_button = tk.Button(
            button_frame,
            text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å",
            command=self.check_spelling_async,
            bg='#3498db',
            fg='white',
            font=('SF Pro Display', 12, 'bold'),
            relief='flat',
            padx=20,
            pady=8,
            cursor='hand2'
        )
        self.check_button.pack(side='left', padx=(0, 10))
        
        self.clear_button = tk.Button(
            button_frame,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å",
            command=self.clear_text,
            bg='#95a5a6',
            fg='white',
            font=('SF Pro Display', 12),
            relief='flat',
            padx=20,
            pady=8,
            cursor='hand2'
        )
        self.clear_button.pack(side='left')
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress = ttk.Progressbar(
            main_frame, 
            mode='indeterminate',
            length=300
        )
        self.progress.pack(pady=(0, 10))
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        result_label = tk.Label(
            main_frame,
            text="–†–µ–∑—É–ª—å—Ç–∞—Ç:",
            font=('SF Pro Display', 12),
            bg='#f0f0f0'
        )
        result_label.pack(anchor='w', pady=(5, 2))
        
        self.result_text = scrolledtext.ScrolledText(
            main_frame,
            height=8,
            font=('SF Pro Display', 11),
            wrap=tk.WORD,
            bg='#f8f9fa',
            relief='solid',
            borderwidth=1,
            state='disabled'
        )
        self.result_text.pack(fill='both', expand=True)
        
        # –°—Ç–∞—Ç—É—Å-–±–∞—Ä
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_bar = tk.Label(
            self.root,
            textvariable=self.status_var,
            relief='sunken',
            anchor='w',
            bg='#ecf0f1',
            font=('SF Pro Display', 10)
        )
        status_bar.pack(fill='x', side='bottom')
    
    def check_yandex_speller(self, text):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.–°–ø–µ–ª–ª–µ—Ä"""
        try:
            url = "https://speller.yandex.net/services/spellservice.json/checkText"
            params = {'text': text, 'lang': 'ru', 'options': 0}
            
            response = self.session.get(url, params=params, timeout=15)
            response.raise_for_status()
            
            result = response.json()
            corrected_text = text
            errors_count = len(result)
            
            offset = 0
            for error in result:
                if 's' in error and error['s']:
                    pos = error['pos'] + offset
                    length = error['len']
                    suggestion = error['s'][0]
                    
                    corrected_text = (corrected_text[:pos] + 
                                    suggestion + 
                                    corrected_text[pos + length:])
                    
                    offset += len(suggestion) - length
            
            return corrected_text, errors_count, None
            
        except Exception as e:
            return text, 0, str(e)
    
    def check_spelling_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏"""
        text = self.input_text.get('1.0', tk.END).strip()
        
        if not text:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self.check_spelling_thread, args=(text,))
        thread.daemon = True
        thread.start()
    
    def check_spelling_thread(self, text):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.root.after(0, self.start_checking)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é
        corrected, errors_count, error = self.check_yandex_speller(text)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.root.after(0, self.finish_checking, text, corrected, errors_count, error)
    
    def start_checking(self):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI"""
        self.check_button.config(state='disabled')
        self.progress.start()
        self.status_var.set("–ü—Ä–æ–≤–µ—Ä—è—é –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é...")
        
        # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.result_text.config(state='normal')
        self.result_text.delete('1.0', tk.END)
        self.result_text.config(state='disabled')
    
    def finish_checking(self, original_text, corrected_text, errors_count, error):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        self.check_button.config(state='normal')
        self.progress.stop()
        
        self.result_text.config(state='normal')
        
        if error:
            self.result_text.insert(tk.END, f"‚ùå –û—à–∏–±–∫–∞: {error}\n\n")
            self.result_text.insert(tk.END, f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{original_text}")
            self.status_var.set("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ")
        
        elif errors_count > 0:
            self.result_text.insert(tk.END, f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—à–∏–±–æ–∫: {errors_count}\n\n")
            self.result_text.insert(tk.END, f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{corrected_text}\n\n")
            self.result_text.insert(tk.END, f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{original_text}")
            self.status_var.set(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—à–∏–±–æ–∫: {errors_count}")
        
        else:
            self.result_text.insert(tk.END, f"‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n\n")
            self.result_text.insert(tk.END, f"–¢–µ–∫—Å—Ç:\n{original_text}")
            self.status_var.set("–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        self.result_text.config(state='disabled')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        current_time = datetime.now().strftime("%H:%M:%S")
        self.status_var.set(f"{self.status_var.get()} ({current_time})")
    
    def clear_text(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π"""
        self.input_text.delete('1.0', tk.END)
        self.result_text.config(state='normal')
        self.result_text.delete('1.0', tk.END)
        self.result_text.config(state='disabled')
        self.status_var.set("–ü–æ–ª—è –æ—á–∏—â–µ–Ω—ã")


def main():
    """–ó–∞–ø—É—Å–∫ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    root = tk.Tk()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è macOS
    try:
        root.tk.call('tk', 'scaling', 2.0)  # –î–ª—è Retina –¥–∏—Å–ø–ª–µ–µ–≤
    except:
        pass
    
    app = SpellCheckerGUI(root)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
    def on_closing():
        root.quit()
        root.destroy()
    
    root.protocol("WM_DELETE_WINDOW", on_closing)
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    root.mainloop()


if __name__ == "__main__":
    main()
